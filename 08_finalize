# Final Website Best Practices

To ensure your gallery is as fast as possible, implement these final steps on your website:

1.  **Choose a Lightweight Gallery Plugin:**
    *   Use a performance-focused plugin like **Modula**, **FooGallery**, or even the native WordPress Gallery Block. Avoid heavy page-builder galleries if possible.
    *   Configure your plugin to use your uploaded thumbnails for the grid view and link them to the full-size WebP images.

2.  **Enable Lazy Loading:**
    *   This is the most critical setting. It ensures only the images visible on the screen are loaded.
    *   Most modern performance plugins (like LiteSpeed Cache, often available on Hostinger) and gallery plugins have this feature. **Turn it on.**

3.  **Activate a CDN (Content Delivery Network):**
    *   A CDN serves your images from servers around the world, closer to your visitors. This drastically speeds up load times and reduces the load on your server.
    *   **Hostinger plans often include a one-click Cloudflare CDN integration. Activate it from your hPanel.** This is a huge, free performance win.

4.  **Consider Media Offloading (Long-Term):**
    *   As your site grows over the years, you can offload your media to a dedicated storage service like Amazon S3 or Bunny.net. This keeps your hosting account's disk space free and makes your site even faster. This is an advanced step for the future.

By following this complete workflow, you have created a professional, scalable, and extremely fast photo gallery that respects both your server's resources and your visitors' time.

## Elaborating previous points

### Deep Dive: Enabling and Verifying Lazy Loading

In our previous steps, we emphasized that lazy loading is "non-negotiable" for a large photo gallery. This section explains exactly what it is, why it's so critical, and how to ensure it's working correctly on your site.

### What is Lazy Loading? An Analogy

Imagine your webpage is a massive, 300-page book (one page for each photo).

*   **Without Lazy Loading:** When a visitor arrives, you hand them the entire 300-page book at once. They have to wait for the whole heavy book to be delivered before they can even start reading page one. Most will get tired of waiting and leave.

*   **With Lazy Loading:** When a visitor arrives, you hand them only the first page. As they finish reading it and turn to the next, you instantly hand them page two. As they scroll, you deliver each subsequent page just-in-time. The initial delivery is lightning-fast, and the experience is seamless.

Technically, lazy loading is a script that defers the loading of off-screen assets (like images or videos) until they are about to enter the user's viewport (the visible part of the screen).

### Why is Lazy Loading CRITICAL for Your Gallery?

For your specific case—a gallery with 300 images on a shared hosting plan—lazy loading provides four massive benefits:

1.  **Dramatically Faster Initial Page Load:** The browser only needs to download the first few images that are visible. This drastically reduces the initial "weight" of the page, making your site feel incredibly fast to the user. This is the single most important factor for user experience.

2.  **Saves Server Resources:** Your server has 1 CPU core and a limited number of PHP workers (40). Instead of getting hit with 300 simultaneous requests for images when one person visits the page, the server only has to handle a handful of requests at a time. This prevents your site from slowing down or crashing under traffic.

3.  **Reduces Bandwidth Consumption:** You save bandwidth for both yourself and your visitors. Mobile users on limited data plans will especially appreciate not having to download 300 images if they only look at the first 20.

4.  **Improves SEO:** Google's Core Web Vitals are a key ranking factor. Fast-loading pages that provide a good user experience rank better. Lazy loading directly improves metrics like **Largest Contentful Paint (LCP)**, signaling to Google that your page is high-quality.

### How to Enable Lazy Loading on Your Website (WordPress)

You have three primary methods to enable lazy loading. Often, more than one will be active, which is perfectly fine.

#### Method 1: Native WordPress Lazy Loading (The Default)
Since WordPress 5.5, lazy loading is a built-in feature. It automatically adds the `loading="lazy"` attribute to most standard `<img>` tags generated by WordPress content.

*   **Pros:** It's enabled by default, no setup required.
*   **Cons:** It may not apply to images added in more complex ways, such as CSS background images or some custom gallery plugin outputs.
*   **Action:** You likely don't need to do anything, but it's good to know this is the baseline.

#### Method 2: Your Performance/Caching Plugin (Most Powerful)
This is the recommended approach. A good performance plugin gives you more control and often uses a more robust JavaScript-based method that catches more images than the native WordPress feature.

*   **Example (LiteSpeed Cache):** Since you use Hostinger, you likely have access to the LiteSpeed Cache plugin, which is excellent.
    1.  In your WordPress dashboard, go to `LiteSpeed Cache` -> `Page Optimization`.
    2.  Click on the `[2] Media Settings` tab.
    3.  Make sure **Lazy Load Images** is set to **ON**.
    4.  Save Changes.

*   **Example (WP Rocket, Perfmatters, etc.):** Other popular plugins have a simple checkbox in their "Media" or "Lazy Load" tabs.

#### Method 3: Your Gallery Plugin's Settings
Well-built gallery plugins (like **Modula** or **FooGallery**) know that their users will have many images, so they often include their own, optimized lazy loading feature.

*   **Action:** When you choose and install your gallery plugin, go through its settings. Look for an option explicitly called "Lazy Load," "Performance," or "Image Loading." Enable it. This is often the best choice for the gallery itself, as it's designed to work perfectly with that plugin's code.

### How to VERIFY Lazy Loading is Working

Don't just trust the switch; test it! You can easily see lazy loading in action using your browser's Developer Tools.

1.  **Open Developer Tools:** In Chrome or Firefox, right-click anywhere on your gallery page and select **"Inspect"**, or press `F12` (or `Cmd+Option+I` on Mac).

2.  **Go to the Network Tab:** Click on the "Network" tab in the developer tools panel.

3.  **Filter for Images:** Click the "Img" filter. This will only show you image files being loaded by the page.

4.  **Hard Refresh:** Press `Ctrl+Shift+R` (or `Cmd+Shift+R` on Mac) to reload the page and bypass the cache.

5.  **Observe the Initial Load:** Look at the list of files. You should see **only a small number of images** load initially—the ones you can see at the top of the page without scrolling.



6.  **Scroll and Watch:** Now, slowly scroll down your gallery page. As you scroll, you will see **new image files appear in the Network tab list** as they enter the viewport.



If you see this behavior—a small initial load followed by images loading on-demand as you scroll—then congratulations, your lazy loading is working perfectly. Your site is now optimized to handle a massive gallery with grace.
